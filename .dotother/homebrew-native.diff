diff --git a/Library/Homebrew/extend/ENV/shared.rb b/Library/Homebrew/extend/ENV/shared.rb
index ca6ad76f1..05a2febd2 100644
--- a/Library/Homebrew/extend/ENV/shared.rb
+++ b/Library/Homebrew/extend/ENV/shared.rb
@@ -302,7 +302,7 @@ module SharedEnvExtension
     if @build_bottle && @bottle_arch
       @bottle_arch.to_sym
     else
-      Hardware.oldest_cpu
+      :native
     end
   end
 
diff --git a/Library/Homebrew/extend/ENV/super.rb b/Library/Homebrew/extend/ENV/super.rb
index b8ccfdaae..1f244c17b 100644
--- a/Library/Homebrew/extend/ENV/super.rb
+++ b/Library/Homebrew/extend/ENV/super.rb
@@ -80,6 +80,9 @@ module Superenv
     self["HOMEBREW_DEPENDENCIES"] = determine_dependencies
     self["HOMEBREW_FORMULA_PREFIX"] = @formula.prefix unless @formula.nil?
 
+    append CC_FLAG_VARS, "-march=native"
+    append "RUSTFLAGS", "-C target-cpu=native"
+
     # The HOMEBREW_CCCFG ENV variable is used by the ENV/cc tool to control
     # compiler flag stripping. It consists of a string of characters which act
     # as flags. Some of these flags are mutually exclusive.
diff --git a/Library/Homebrew/formula_installer.rb b/Library/Homebrew/formula_installer.rb
index 469cd5153..076c28cb9 100644
--- a/Library/Homebrew/formula_installer.rb
+++ b/Library/Homebrew/formula_installer.rb
@@ -155,48 +155,14 @@ class FormulaInstaller
   sig { params(output_warning: T::Boolean).returns(T::Boolean) }
   def pour_bottle?(output_warning: false)
     return false if @pour_failed
-
-    return false if !formula.bottle_tag? && !formula.local_bottle_path
     return true  if force_bottle?
-    return false if build_from_source? || build_bottle? || interactive?
-    return false if @cc
-    return false unless options.empty?
-    return false if formula.bottle_disabled?
-
-    unless formula.pour_bottle?
-      if output_warning && formula.pour_bottle_check_unsatisfied_reason
-        opoo <<~EOS
-          Building #{formula.full_name} from source:
-            #{formula.pour_bottle_check_unsatisfied_reason}
-        EOS
-      end
-      return false
-    end
-
-    bottle = formula.bottle_specification
-    unless bottle.compatible_locations?
-      if output_warning
-        opoo <<~EOS
-          Building #{formula.full_name} from source as the bottle needs:
-          - HOMEBREW_CELLAR: #{bottle.cellar} (yours is #{HOMEBREW_CELLAR})
-          - HOMEBREW_PREFIX: #{bottle.prefix} (yours is #{HOMEBREW_PREFIX})
-        EOS
-      end
-      return false
-    end
-
-    true
+    false
   end
 
   sig { params(dep: Formula, build: BuildOptions).returns(T::Boolean) }
   def install_bottle_for?(dep, build)
     return pour_bottle? if dep == formula
-
-    @build_from_source_formulae.exclude?(dep.full_name) &&
-      dep.bottle.present? &&
-      dep.pour_bottle? &&
-      build.used_options.empty? &&
-      dep.bottle&.compatible_locations?
+    false
   end
 
   sig { void }
