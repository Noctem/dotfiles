diff --git a/Library/Homebrew/extend/ENV/shared.rb b/Library/Homebrew/extend/ENV/shared.rb
index 067deee69..a600fc35c 100644
--- a/Library/Homebrew/extend/ENV/shared.rb
+++ b/Library/Homebrew/extend/ENV/shared.rb
@@ -273,7 +273,7 @@ module SharedEnvExtension
     if ARGV.build_bottle? && ARGV.bottle_arch
       ARGV.bottle_arch
     else
-      Hardware.oldest_cpu
+      :native
     end
   end
 
diff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb
index 06f4e50d3..38ad3209d 100644
--- a/Library/Homebrew/extend/ENV/std.rb
+++ b/Library/Homebrew/extend/ENV/std.rb
@@ -114,7 +114,7 @@ module Stdenv
     replace_in_cflags(/-Xarch_#{Hardware::CPU.arch_32_bit} (-march=\S*)/, '\1')
     # Clang mistakenly enables AES-NI on plain Nehalem
     map = Hardware::CPU.optimization_flags
-                       .merge(nehalem: "-march=nehalem -Xclang -target-feature -Xclang -aes")
+                       .merge(native: "-march=native -Xclang -target-feature -Xclang -aes")
     set_cpu_cflags map
   end
 
diff --git a/Library/Homebrew/extend/ENV/super.rb b/Library/Homebrew/extend/ENV/super.rb
index 2aa440689..fcbdd1109 100644
--- a/Library/Homebrew/extend/ENV/super.rb
+++ b/Library/Homebrew/extend/ENV/super.rb
@@ -67,6 +67,8 @@ module Superenv
     self["HOMEBREW_DEPENDENCIES"] = determine_dependencies
     self["HOMEBREW_FORMULA_PREFIX"] = formula.prefix unless formula.nil?
 
+    append CC_FLAG_VARS, "-march=native"
+
     # The HOMEBREW_CCCFG ENV variable is used by the ENV/cc tool to control
     # compiler flag stripping. It consists of a string of characters which act
     # as flags. Some of these flags are mutually exclusive.
diff --git a/Library/Homebrew/formula_installer.rb b/Library/Homebrew/formula_installer.rb
index d7fba9fd9..1eec5e7ff 100644
--- a/Library/Homebrew/formula_installer.rb
+++ b/Library/Homebrew/formula_installer.rb
@@ -94,47 +94,11 @@ class FormulaInstaller
   end
 
   def pour_bottle?(install_bottle_options = { warn: false })
-    return false if @pour_failed
-
-    return false if !formula.bottled? && !formula.local_bottle_path
-    return true  if force_bottle?
-    return false if build_from_source? || build_bottle? || interactive?
-    return false if ARGV.cc
-    return false unless options.empty?
-    return false if formula.bottle_disabled?
-
-    unless formula.pour_bottle?
-      if install_bottle_options[:warn] && formula.pour_bottle_check_unsatisfied_reason
-        opoo <<~EOS
-          Building #{formula.full_name} from source:
-            #{formula.pour_bottle_check_unsatisfied_reason}
-        EOS
-      end
-      return false
-    end
-
-    bottle = formula.bottle_specification
-    unless bottle.compatible_cellar?
-      if install_bottle_options[:warn]
-        opoo <<~EOS
-          Building #{formula.full_name} from source:
-            The bottle needs a #{bottle.cellar} Cellar (yours is #{HOMEBREW_CELLAR}).
-        EOS
-      end
-      return false
-    end
-
-    true
+    return false unless force_bottle?
   end
 
   def install_bottle_for?(dep, build)
-    return pour_bottle? if dep == formula
-    return false if ARGV.build_formula_from_source?(dep)
-    return false unless dep.bottle && dep.pour_bottle?
-    return false unless build.used_options.empty?
-    return false unless dep.bottle.compatible_cellar?
-
-    true
+    return pour_bottle?
   end
 
   def prelude
